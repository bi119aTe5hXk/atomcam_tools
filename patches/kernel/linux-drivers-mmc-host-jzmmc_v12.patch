diff -urp a/drivers/mmc/host/jzmmc_v12.c b/drivers/mmc/host/jzmmc_v12.c
--- a/drivers/mmc/host/jzmmc_v12.c	2024-04-20 03:04:51.545537008 +0000
+++ b/drivers/mmc/host/jzmmc_v12.c	2024-04-20 03:04:51.545537008 +0000
@@ -9,8 +9,8 @@
  * published by the Free Software Foundation.
  */
 
-#define VERBOSE_DEBUG
-#define DEBUG
+//#define VERBOSE_DEBUG
+//#define DEBUG
 #include <linux/platform_device.h>
 #include <linux/mmc/host.h>
 #include <linux/mmc/card.h>
@@ -139,6 +139,7 @@
 	u32			sample_rdata;
 	u32			sample_wdata;
 	int         timeout_state;
+	struct proc_dir_entry *proc;
 };
 
 #define ERROR_IFLG (				\
@@ -948,7 +949,7 @@
 	 * It never happens in design, but we add BUG_ON here to prevent it.
 	 */
 	if ((host->state != STATE_IDLE) && (mrq->data != NULL)) {
-		dev_warn(host->dev, "operate in non-idle state = host->state\n", host->state);
+		dev_warn(host->dev, "operate in non-idle state = host->state %d\n", host->state);
 		WARN_ON(1);
 	}
 
@@ -1120,9 +1121,16 @@
 	struct jzmmc_host *host = (struct jzmmc_host *)data;
 	bool			present;
 	bool			present_old;
+	static int firstEntry = 1;
 	dev_vdbg(host->dev, "enter jzmmc detect change!\n");
 
 	present = get_pin_status(&host->pdata->gpio->cd);
+	if(!firstEntry) {
+		dev_warn(host->dev, "enter jzmmc detect change cd-pin %d\n", present);
+	  enable_irq(gpio_to_irq(host->pdata->gpio->cd.num));
+		return;
+	}
+	firstEntry = 0;
 	present_old = test_bit(JZMMC_CARD_PRESENT, &host->flags);
 
 	if ((present != present_old) || (present_old && host->mmc->card)) {
@@ -1495,7 +1503,6 @@
 				   struct device_attribute *attr,
 					const char *buf, size_t count)
 {
-	struct jzmmc_platform_data *pdata = dev->platform_data;
 	struct jzmmc_host *host = dev_get_drvdata(dev);
 
 	if (buf == NULL) {
@@ -1685,7 +1692,7 @@
 			jzmmc_clk_autoctrl(host, 1);
 			if(!timer_pending(&host->detect_timer)){
 				disable_irq_nosync(gpio_to_irq(host->pdata->gpio->cd.num));
-				mod_timer(&host->detect_timer, jiffies + msecs_to_jiffies(500));
+				mod_timer(&host->detect_timer, jiffies);
 			}
 
 		} else {
@@ -1721,6 +1728,7 @@
 	}
 }
 
+extern struct proc_dir_entry * jz_proc_mkdir(char *s);
 static int __init jzmmc_probe(struct platform_device *pdev)
 {
 	int irq;
@@ -1806,6 +1814,11 @@
 	if (ret < 0)
 		goto err_gpio_init;
 
+	if(!host->index) {
+		host->proc = jz_proc_mkdir("mmc0");
+		if(!host->proc) printk("Failed to create mmc0 proc\n");
+	}
+
 	jzmmc_host_init(host, mmc);
 	ret = sysfs_create_group(&pdev->dev.kobj, &jzmmc_attr_group);
 	if (ret < 0)
@@ -1833,10 +1846,16 @@
 	return ret;
 }
 
+extern void proc_remove(struct proc_dir_entry *de);
 static int __exit jzmmc_remove(struct platform_device *pdev)
 {
 	struct jzmmc_host *host = mmc_get_drvdata(pdev);
 
+	if(!host->index && host->proc) {
+		proc_remove(host->proc);
+		host->proc = NULL;
+	}
+
 	mmc_set_drvdata(pdev, NULL);
 	mmc_remove_host(host->mmc);
 	mmc_free_host(host->mmc);
