diff --git a/inc/ALSACapture.h b/inc/ALSACapture.h
index ca91eda..457e135 100755
--- a/inc/ALSACapture.h
+++ b/inc/ALSACapture.h
@@ -22,8 +22,8 @@
 
 struct ALSACaptureParameters 
 {
-	ALSACaptureParameters(const char* devname, const std::list<snd_pcm_format_t> & formatList, unsigned int sampleRate, unsigned int channels, int verbose) : 
-		m_devName(devname), m_formatList(formatList), m_sampleRate(sampleRate), m_channels(channels), m_verbose(verbose) {
+	ALSACaptureParameters(const char* devname, const std::list<snd_pcm_format_t> & formatList, unsigned int sampleRate, unsigned int channels, int verbose, std::string format) :
+		m_devName(devname), m_formatList(formatList), m_sampleRate(sampleRate), m_channels(channels), m_verbose(verbose), m_format(format) {
 			
 	}
 		
@@ -32,6 +32,7 @@ struct ALSACaptureParameters
 	unsigned int     m_sampleRate;
 	unsigned int     m_channels;
 	int              m_verbose;
+	std::string      m_format;
 };
 
 class ALSACapture  : public DeviceInterface
@@ -52,7 +53,7 @@ class ALSACapture  : public DeviceInterface
 		
 		virtual int            getSampleRate()      { return m_params.m_sampleRate; }
 		virtual int            getChannels  ()      { return m_params.m_channels;   }
-		virtual int            getAudioFormat ()    { return m_fmt;                 }
+		virtual std::string    getAudioFormat()     { return m_params.m_format;     }
 		virtual std::list<int> getAudioFormatList() { return m_fmtList;             }
 
 		
@@ -63,6 +64,7 @@ class ALSACapture  : public DeviceInterface
 		ALSACaptureParameters m_params;
 		snd_pcm_format_t      m_fmt;
 		std::list<int>        m_fmtList;
+		char*                 m_pcm_buffer;
 };
 
 
diff --git a/inc/BaseServerMediaSubsession.h b/inc/BaseServerMediaSubsession.h
index 6ef20c2..28c9c4d 100755
--- a/inc/BaseServerMediaSubsession.h
+++ b/inc/BaseServerMediaSubsession.h
@@ -76,37 +76,11 @@ class BaseServerMediaSubsession
             return rtpFormat;
         }
 
-        static std::string getAudioRtpFormat(int format, int sampleRate, int channels)
+        static std::string getAudioRtpFormat(std::string format, int sampleRate, int channels)
         {
             std::ostringstream os;
 #ifdef HAVE_ALSA            
-            os << "audio/";
-            switch (format) {                
-                case SND_PCM_FORMAT_A_LAW:
-                    os << "PCMA";
-                    break;
-                case SND_PCM_FORMAT_MU_LAW:
-                    os << "PCMU";
-                    break;
-                case SND_PCM_FORMAT_S8:
-                    os << "L8";
-                    break;
-                case SND_PCM_FORMAT_S24_BE:
-                case SND_PCM_FORMAT_S24_LE:
-                    os << "L24";
-                    break;
-                case SND_PCM_FORMAT_S32_BE:
-                case SND_PCM_FORMAT_S32_LE:
-                    os << "L32";
-                    break;
-                case SND_PCM_FORMAT_MPEG:
-                    os << "MPEG";
-                    break;
-                default:
-                    os << "L16";
-                    break;
-            }
-            os << "/" << sampleRate << "/" << channels;
+            os << "audio/" << format << "/" << sampleRate << "/" << channels;
 #endif            
             return os.str();
         }        
diff --git a/inc/DeviceInterface.h b/inc/DeviceInterface.h
index 23ff2e0..7d732e5 100755
--- a/inc/DeviceInterface.h
+++ b/inc/DeviceInterface.h
@@ -26,7 +26,7 @@ class DeviceInterface
 		virtual std::list<int> getVideoFormatList()          { return std::list<int>(); }
 		virtual int            getSampleRate()               { return -1; }
 		virtual int            getChannels()                 { return -1; }
-		virtual int            getAudioFormat()              { return -1; }				
+		virtual std::string    getAudioFormat()              { return std::string("");  }
 		virtual std::list<int> getAudioFormatList()          { return std::list<int>(); }
 		virtual ~DeviceInterface()                           {};
 };
diff --git a/main.cpp b/main.cpp
index 6d9c7ca..2493e0e 100755
--- a/main.cpp
+++ b/main.cpp
@@ -209,7 +209,9 @@ int main(int argc, char** argv)
 #endif
 				
 				std::cout << "\t Devices :"                                                                                                    << std::endl;
-				std::cout << "\t [V4L2 device][,ALSA device] : V4L2 capture device or/and ALSA capture device (default "<< dev_name << ")"     << std::endl;
+				std::cout << "\t [V4L2 device][,ALSA device[@output format]]" << std::endl;
+				std::cout << "\t                 : V4L2 capture device or/and ALSA capture device (default "<< dev_name << ")"     << std::endl;
+				std::cout << "\t                 : output format : [S16_BE] (default S16_BE)" << std::endl;
 				exit(0);
 			}
 		}
diff --git a/src/ALSACapture.cpp b/src/ALSACapture.cpp
index 3263e3c..cbb13bd 100644
--- a/src/ALSACapture.cpp
+++ b/src/ALSACapture.cpp
@@ -120,30 +120,36 @@ ALSACapture::ALSACapture(const ALSACaptureParameters & params) : m_pcm(NULL), m_
 		LOG(ERROR) << "cannot set channel count device: " << m_params.m_devName << " error:" <<  snd_strerror (err);
 		this->close();
 	}
-	else if ((err = snd_pcm_hw_params (m_pcm, hw_params)) < 0) {
-		LOG(ERROR) << "cannot set parameters device: " << m_params.m_devName << " error:" <<  snd_strerror (err);
-		this->close();
-	}
 	
-	// get buffer size
-	else if ((err = snd_pcm_get_params(m_pcm, &m_bufferSize, &m_periodSize)) < 0) {
-		LOG(ERROR) << "cannot get parameters device: " << m_params.m_devName << " error:" <<  snd_strerror (err);
-		this->close();
+	if(!err) {
+			// PCM initialize
+			m_periodSize = m_params.m_sampleRate * 120 / 1000;
+			m_bufferSize = m_periodSize * snd_pcm_format_physical_width(m_fmt) / 8 * m_params.m_channels;
 	}
-	
-	// start capture
-	else if ((err = snd_pcm_prepare (m_pcm)) < 0) {
-		LOG(ERROR) << "cannot prepare audio interface for use device: " << m_params.m_devName << " error:" <<  snd_strerror (err);
-		this->close();
-	}			
-	else if ((err = snd_pcm_start (m_pcm)) < 0) {
-		LOG(ERROR) << "cannot start audio interface for use device: " << m_params.m_devName << " error:" <<  snd_strerror (err);
-		this->close();
-	}			
-	
+
+	if(!err) {
+		if ((err = snd_pcm_hw_params_set_period_size(m_pcm, hw_params, m_periodSize, 0)) < 0) {
+			LOG(ERROR) << "cannot set sample rate device: " << m_params.m_devName << " periodSize: " << m_periodSize << " error:" <<  snd_strerror (err);
+			this->close();
+		}
+		else if ((err = snd_pcm_hw_params (m_pcm, hw_params)) < 0) {
+			LOG(ERROR) << "cannot set parameters device: " << m_params.m_devName << " error:" <<  snd_strerror (err);
+			this->close();
+		}
+		// start capture
+		else if ((err = snd_pcm_prepare (m_pcm)) < 0) {
+			LOG(ERROR) << "cannot prepare audio interface for use device: " << m_params.m_devName << " error:" <<  snd_strerror (err);
+			this->close();
+		}
+		else if ((err = snd_pcm_start (m_pcm)) < 0) {
+			LOG(ERROR) << "cannot start audio interface for use device: " << m_params.m_devName << " error:" <<  snd_strerror (err);
+			this->close();
+		}
+	}
+
 	if (!err) {
 		// get supported format
-		for (int i = 0; i < sizeof(formats)/sizeof(formats[0]); ++i) {
+		for (int i = 0; i < (int)(sizeof(formats)/sizeof(formats[0])); ++i) {
 			if (!snd_pcm_hw_params_test_format(m_pcm, hw_params, formats[i])) {
 				m_fmtList.push_back(formats[i]);
 			}
diff --git a/src/ServerMediaSubsession.cpp b/src/ServerMediaSubsession.cpp
index 53beffe..340f974 100755
--- a/src/ServerMediaSubsession.cpp
+++ b/src/ServerMediaSubsession.cpp
@@ -101,12 +101,12 @@ RTPSink*  BaseServerMediaSubsession::createSink(UsageEnvironment& env, Groupsock
 		getline(is, sampleRate, '/');	
 		std::string channels("2");
 		getline(is, channels);	
-		videoSink = SimpleRTPSink::createNew(env, rtpGroupsock,rtpPayloadTypeIfDynamic, atoi(sampleRate.c_str()), "audio", "L16", atoi(channels.c_str()), True, False); 
+		videoSink = SimpleRTPSink::createNew(env, rtpGroupsock, rtpPayloadTypeIfDynamic, atoi(sampleRate.c_str()), "audio", "L16", atoi(channels.c_str()), True, False);
+	}
+	else if (format.find("audio/MPEG") == 0)
+	{
+		videoSink = MPEG1or2AudioRTPSink::createNew(env, rtpGroupsock);
 	}
- 	else if (format.find("audio/MPEG") == 0)
-    {
-        videoSink = MPEG1or2AudioRTPSink::createNew(env, rtpGroupsock);
-    }
 	return videoSink;
 }
 
diff --git a/src/V4l2RTSPServer.cpp b/src/V4l2RTSPServer.cpp
index fb33f28..fac951d 100644
--- a/src/V4l2RTSPServer.cpp
+++ b/src/V4l2RTSPServer.cpp
@@ -12,6 +12,7 @@
 #include <dirent.h>
 
 #include <sstream>
+#include <algorithm>
 
 #include "logger.h"
 #include "V4l2Capture.h"
@@ -203,13 +204,23 @@ StreamReplicator* V4l2RTSPServer::CreateAudioReplicator(
 	StreamReplicator* audioReplicator = NULL;
 	if (!audioDev.empty())
 	{
+		std::istringstream is(audioDev);
+		std::string device;
+		getline(is, device, '@');
+		std::string format;
+		getline(is, format);
+		std::transform(format.begin(), format.end(), format.begin(), ::toupper);
+		if(format == std::string("S16_BE")) {
+			format = "L16";
+    }
+
 		// find the ALSA device associated with the V4L2 device
-		std::string audioDevice = getV4l2Alsa(audioDev);
+		std::string audioDevice = getV4l2Alsa(device);
 	
 		// Init audio capture
-		LOG(NOTICE) << "Create ALSA Source..." << audioDevice;
-		
-		ALSACaptureParameters param(audioDevice.c_str(), audioFmtList, audioFreq, audioNbChannels, verbose);
+		LOG(NOTICE) << "Create ALSA Source..." << audioDevice << " output format : " << format;
+
+		ALSACaptureParameters param(audioDevice.c_str(), audioFmtList, audioFreq, audioNbChannels, verbose, format);
 		ALSACapture* audioCapture = ALSACapture::createNew(param);
 		if (audioCapture) 
 		{
-- 
