diff --git a/internal/homekit/api.go b/internal/homekit/api.go
index abd8e97..96c8ad3 100644
--- a/internal/homekit/api.go
+++ b/internal/homekit/api.go
@@ -6,6 +6,7 @@ import (
 	"net/http"
 	"net/url"
 	"strings"
+	"strconv"
 
 	"github.com/AlexxIT/go2rtc/internal/api"
 	"github.com/AlexxIT/go2rtc/internal/app"
@@ -137,3 +138,42 @@ func findHomeKitURLs() map[string]*url.URL {
 	}
 	return urls
 }
+
+type PairingInfo struct {
+	Name         string     `json:"name"`
+	DeviceID     string     `json:"device_id"`
+	SetupURI     string     `json:"setup_uri"`
+	Pin          string     `json:"pin"`
+	Status       string     `json:"status"`
+}
+
+func setupURI(host string, s *server) PairingInfo {
+	// for QR-Code
+	category, _ := strconv.ParseInt(hap.CategoryCamera, 10, 64)
+	pin, _ := strconv.ParseInt(strings.Replace(s.hap.Pin, "-", "", -1), 10, 64)
+	payload := "00000000" + strconv.FormatInt(category << 31 + 1 << 28 + pin, 36)
+	uri := strings.ToUpper("X-HM://" + payload[len(payload)-9:] + s.hap.SetupID[:4])
+	status := "unpaired"
+	if len(s.pairings) > 0 {
+		status = "paired"
+	}
+	return PairingInfo {
+		Name: s.mdns.Name ,
+		DeviceID: s.hap.DeviceID,
+		SetupURI: uri,
+		Pin: s.hap.Pin,
+		Status: status,
+	}
+}
+
+func apiPairingHandler(w http.ResponseWriter, r *http.Request) {
+	switch r.Method {
+	case "GET":
+		pairingInfo := map[string]PairingInfo{}
+		for host, s := range servers {
+			pairingInfo[s.stream] = setupURI(host, s)
+		}
+		api.ResponseJSON(w, pairingInfo)
+
+	}
+}
diff --git a/internal/homekit/homekit.go b/internal/homekit/homekit.go
index bfe3e97..86a5d4b 100644
--- a/internal/homekit/homekit.go
+++ b/internal/homekit/homekit.go
@@ -26,6 +26,7 @@ func Init() {
 			Name          string   `yaml:"name"`
 			DeviceID      string   `yaml:"device_id"`
 			DevicePrivate string   `yaml:"device_private"`
+			SetupID       string   `yaml:"setup_id"`
 			Pairings      []string `yaml:"pairings"`
 		} `yaml:"homekit"`
 	}
@@ -36,6 +37,7 @@ func Init() {
 	streams.HandleFunc("homekit", streamHandler)
 
 	api.HandleFunc("api/homekit", apiHandler)
+	api.HandleFunc("api/homekit/pairing", apiPairingHandler)
 
 	if cfg.Mod == nil {
 		return
@@ -62,6 +64,7 @@ func Init() {
 		}
 
 		deviceID := calcDeviceID(conf.DeviceID, id) // random MAC-address
+		setupID := (conf.SetupID + "HMXS")[:4] // default setup ID
 		name := calcName(conf.Name, deviceID)
 
 		srv := &server{
@@ -73,6 +76,7 @@ func Init() {
 		srv.hap = &hap.Server{
 			Pin:           pin,
 			DeviceID:      deviceID,
+			SetupID:       setupID,
 			DevicePrivate: calcDevicePrivate(conf.DevicePrivate, id),
 			GetPair:       srv.GetPair,
 			AddPair:       srv.AddPair,
diff --git a/pkg/hap/server.go b/pkg/hap/server.go
index 2a91232..a4b6171 100644
--- a/pkg/hap/server.go
+++ b/pkg/hap/server.go
@@ -23,6 +23,7 @@ type HandlerFunc func(net.Conn) error
 type Server struct {
 	Pin           string
 	DeviceID      string
+	SetupID       string
 	DevicePrivate []byte
 
 	GetPair func(conn net.Conn, id string) []byte
@@ -45,7 +46,7 @@ func (s *Server) ServerPublic() []byte {
 func (s *Server) SetupHash() string {
 	// should be setup_id (random 4 alphanum) + device_id (mac address)
 	// but device_id is random, so OK
-	b := sha512.Sum512([]byte(s.DeviceID))
+	b := sha512.Sum512([]byte(s.SetupID[:4] + s.DeviceID))
 	return base64.StdEncoding.EncodeToString(b[:4])
 }
 
